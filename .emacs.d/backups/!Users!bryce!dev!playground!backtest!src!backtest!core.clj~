(ns backtest.core
  (:require [clojure.java.io :as io]
              [clojure-csv.core :as csv]))

(defn take-csv
  "Takes file name and reads data."
  [fname]
  (with-open [file (io/reader fname)]
        (csv/parse-csv (slurp file))))

(def history
  (for [[date open high low close volume] (take-csv "input.csv")]
    {:date date :open open :high high :low low :close close :volume volume}))


(defn std-dev [samples]
  (let [n (count samples)
        mean (/ (reduce + samples) n)
        intermediate (map #(Math/pow (- %1 mean) 2) samples)]
    (Math/sqrt
     (/ (reduce + intermediate) n))))

(def history-buckets
  (let [window 20]
    (for [[day bucket] (map vector history (partition window 1 history))
          :let [opens (map :open bucket)]]
      (as-> day _
          (assoc _ :mean (/ (reduce + opens ) window))
          (assoc _ :std-dev (std-dev opens))
          (assoc _ :bolinger-top (+ (:mean _) (* 2 (:std-dev _))) )
          (assoc _ :bolinger-bottom (- (:mean _) (* 2 (:std-dev _))))))))




(def orders
  (remove nil?  (for [{:keys [bolinger-bottom mean open date]} history-buckets]
                  (cond
                   (< open bolinger-bottom ) ["buy" open date]
                   (> open mean) ["sell" open date]
                   ))))

(defn strategy-returns []
  (reduce (fn [sum order]
            (if (not= (:last-action sum) (first order))
              (case (first order)
                "buy" (assoc sum
                        :last-buy (second order)
                        :last-action "buy"
                        :investments (/ (:dollars sum) (second order))
                        :start-date (or (:start-date sum) (last order))
                        :dollars 0)
                "sell" (assoc sum
                         :last-action "sell"
                         :dollars (-  (* (:investments sum) (second order)) 5)
                         :investments 0)
                )
              sum)
            )
          {:last-action "sell"  :dollars 2000 :initial-dollars 2000}
          (drop-while #(= "sell" (first %)) (reverse orders))))
