(ns reporting.offer-performance-test
  (:require [reporting.offer-performance :refer :all]
            [roux.events :as e]
            [roux.offer :as o]
            [clojure.test :refer :all]
            [clj-time.core :as time]
            [clojure.string :as s]
            [roux.format :as format]
            [roux.utils :as u]))

(deftest test-parsing-command-line-dates
  (testing "Dates are intepretted as EST"
    (is (= (.getMillis (time/date-time 2014 2 1 5))
           (.getMillis (parse-date "2014-02-01"))))))

(deftest test-add-total-row
  (is (= {:shows                   22,
          :test-CTR                nil,
          :control-CTR             nil,
          :control-conversion-rate nil,
          :conversion-rate         0.18181818181818182,
          :offer_name              "TOTAL",
          :conversion-lift         nil,
          :clicks                  12,
          :CTR                     0.5454545454545454,
          :CTR-lift                nil,
          :conversions             4,
          :test-conversion-rate    nil}
         (first (add-total-row [{:offer_name "one", :clicks 3 :shows 10 :conversions 1}
                                {:offer_name "two", :clicks 9 :shows 12 :conversions 3}])))))

(deftest test-sort-by-specified-columns
  (testing "Sort by single column"
    (is (= [{:value 100} {:value 10} {:value 1}]
           (sort-by-columns [:value] [{:value 10} {:value 100} {:value 1}]))))

  (testing "sorts by multiple columns"
    (is (= [{:x 100 :y 101} {:x 100 :y 99} {:x 10 :y 300}]
           (sort-by-columns [:x :y] [{:x 100 :y 101} {:x 100 :y 99} {:x 10 :y 300}])))))


(deftest test-ccc-report
  (let [event (fn [offer-id type count]
                {:position "4" :offer_id offer-id :channel "CCC" :cnt count :type type})]

    (testing "Views in the total column should be filled in"
      (let [hadoop-data [(event "offerid1" "shows" 20) (event "offerid1" "discussed" 2) (event "offerid1" "conversions" 1)]
            report-rows (:rows (ccc-report hadoop-data (time/date-time 2014 2 14) (time/date-time 2014 2 20) 99))]
        (is (= 99 (:views (first (filter totals-offer-row? report-rows)))))))))

(defn event [offer-id type count]
  {:position "4", :offer_id offer-id, :in_test_group "Y", :channel "SOP", :cnt count, :type type})

(deftest test-sop-report
  (testing "should sort by highest conversion properties then conversion rates"
    (let [hadoop-data [(event "o81-13625" "click" 1) (event "o81-13625" "show" 3) (event "o81-13625" "converted" 1)
                       (event "o81-13302" "click" 1) (event "o81-13302" "show" 5) (event "o81-13302" "converted" 1)
                       (event "o81-13303" "click" 1) (event "o81-13303" "show" 2) (event "o81-13303" "converted" 1)
                       (event "o421-5728" "click" 1) (event "o421-5728" "show" 1) (event "o421-5728" "converted" 1)]
          offer-data {"o81-13625" {:source_key "web1" :property_id "prop1"}
                      "o81-13302" {:source_key "web2" :property_id "prop2"}
                      "o81-13303" {:source_key "web2" :property_id "prop2"}
                      "o421-5728" {:source_key "web3" :property_id "prop3"}}
          expected [
                                        ; totals
                    {:conversion-rate (/ 4.0 (+ 3 5 2 1))}
                    {:property_id "prop3", :conversion-rate (/ 1.0 1)}
                    {:property_id "prop1" :conversion-rate (/ 1.0 3)}
                    {:property_id "prop2", :conversion-rate (/ 2.0 7)}

                                        ; rows
                    {:offer_id "o421-5728", :property_id "prop3", :conversion-rate (/ 1.0 1)}
                    {:offer_id "o81-13625", :property_id "prop1", :conversion-rate (/ 1.0 3)}
                    {:offer_id "o81-13303", :property_id "prop2", :conversion-rate (/ 1.0 2)}
                    {:offer_id "o81-13302", :property_id "prop2", :conversion-rate (/ 1.0 5)}
                    ]

          actual (map (fn [row] (select-keys row [:offer_id :property_id :conversion-rate]))
                      (:rows (sop-report hadoop-data (time/date-time 2014 1 5) (time/date-time 2014 2 6) {} offer-data)))]

      (is (= expected actual))))

  (let [hadoop-data [{:position "4", :offer_id "o81-13625", :offer_name "Celebrate the Art of Play", :in_test_group "Y", :channel "SOP", :cnt 1, :type "click"}
                     {:position "4", :offer_id "o81-13625", :offer_name "Celebrate the Art of Play", :in_test_group nil, :channel "SOP", :cnt 20, :type "show"}
                     {:position "3", :offer_id "o81-13625", :offer_name "Celebrate the Art of Play", :in_test_group "N", :channel "SOP", :cnt 1, :type "show"}
                     {:position "4", :offer_id "o81-13625", :offer_name "Celebrate the Art of Play", :in_test_group "Y", :channel "SOP", :cnt 13, :type "show"}
                     {:position "6", :offer_id "o81-13625", :offer_name "Celebrate the Art of Play", :in_test_group "Y", :channel "SOP", :cnt 1, :type "converted"}
                     {:position "2", :offer_id "o81-11302", :offer_name "SPG Breakfast Plus", :in_test_group nil, :channel "SOP", :cnt 6, :type "click"}
                     {:position "8", :offer_id "o81-11302", :offer_name "SPG Breakfast Plus", :in_test_group "Y", :channel "SOP", :cnt 2, :type "show"}
                     {:position "6", :offer_id "o81-11302", :offer_name "SPG Breakfast Plus", :in_test_group "N", :channel "SOP", :cnt 1, :type "click"}
                     {:position "2", :offer_id "o421-5728", :offer_name "The Longer You Stay, The More You Save", :in_test_group "Y", :channel "SOP", :cnt 1, :type "converted"}]
        average-positions {}
        offer-data {"o81-13625" {:source_key "web1" :property_id "prop1"}
                    "o81-11302" {:source_key "web2" :property_id "prop2"}
                    "o421-5728" {:source_key "web3" :property_id "prop3"}}
        report (sop-report hadoop-data (time/date-time 2014 1 5) (time/date-time 2014 2 6) average-positions offer-data)]


    (is (= [{:shows                   34,
             :test-CTR                nil,
             :control-CTR             nil,
             :control-conversion-rate nil,
             :offer_id                "o81-13625",
             :property_id             "prop1",
             :conversion-rate         0.029411764705882353,
             :offer_name              "Celebrate the Art of Play",
             :conversion-lift         nil, :web_canada_id "web1",
             :clicks                  1,
             :CTR                     0.029411764705882353,
             :CTR-lift                nil,
             :channel                 "SOP",
             :conversions             1,
             :avg_position            nil,
             :test-conversion-rate    nil}]
           (filter (fn [row] (= (:offer_id row) "o81-13625")) (:rows report))))))

(defn value->string [value]
  (let [width 8]
    (cond
     (integer? value) (value->string (str value))
     (float? value) (format (str "%-" width ".4f") value)
     (string? value) (subs (format (str "%-" width "s") value) 0 width)
     (nil? value) (value->string "-")
     :else value)))

(defn row->string [values]
  (s/trimr (s/join " | " (map value->string values))))

(defn format-values [column-specs columns row]
  (map (fn [column]
         (let [f (:format (column column-specs))
               value (column row)]
           (when value
             (case f
               :dollars (format (str "$%-8.0f") (double value))
               :dollars-and-cents (format (str "$%-8.2f") (double value))
               value))))
       columns))

(defn report->string [report]
  (let [columns (:columns report)
        column-specs (:column-specs report)
        [_ columns] (if (vector? (first columns))
                      [columns (mapcat second columns)]
                      [nil columns])
        rows (:rows report)]
    (str (s/join "\n" (map s/join (:title report))) "\n"
         "\n"
         (row->string (format/columns->display-names columns column-specs)) "\n"
         (s/join
          "\n"
          (for [row rows]
            (row->string (format-values column-specs columns row)))))))

(defn with [& params]
  (let [all-rows (filter sequential? params)
        params (apply hash-map (filter #(not (sequential? %)) params))]
    (mapcat (fn [rows] (map #(merge params %) rows)) all-rows)))

(defn events [& params]
  (let [params (apply hash-map params)
        {:keys [shows clicks converted order_total]} params
        params (dissoc params :clicks :shows :converted :order_total)]
    (filter :cnt [(assoc params :cnt shows :type "show" :order_total nil)
                  (assoc params :cnt clicks :type "click"  :order_total nil)
                  (assoc params :cnt converted :type "converted" :order_total order_total)])))

(deftest test-report-test-helpers
  (testing "building event count rows"
    (is (= #{{:cnt 26967 :type "show" :in_test_group nil :order_total nil}
             {:cnt 436 :type "click" :in_test_group nil :order_total nil}
             {:cnt 4 :type "converted" :in_test_group nil :order_total 100.00}}
           (set (events :in_test_group nil :shows 26967 :clicks 436 :converted 4 :order_total 100.00))))

    (is (= [{:a 1 :b 2 :c 3}]
           (with :a 1 [{:b 2 :c 3}])))

    (is (= #{
             {:cnt 2641, :type "show", :in_test_group "Y", :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 125, :type "click", :in_test_group "Y", :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 33, :type "converted", :in_test_group "Y", :channel "SOP", :month 2, :year 2014 :order_total nil}


             {:cnt 523, :type "show", :in_test_group "N", :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 23, :type "click", :in_test_group "N", :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 3, :type "converted", :in_test_group "N", :channel "SOP", :month 2, :year 2014 :order_total nil}

             {:cnt 26967, :type "show", :in_test_group nil, :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 436, :type "click", :in_test_group nil, :channel "SOP", :month 2, :year 2014 :order_total nil}
             {:cnt 4, :type "converted", :in_test_group nil, :channel "SOP", :month 2, :year 2014 :order_total nil}

             {:cnt 2, :type "show", :in_test_group "Y", :channel "SOP", :month 3, :year 2014 :order_total nil}
             {:cnt 1, :type "click", :in_test_group "Y", :channel "SOP", :month 3, :year 2014 :order_total nil}
             }
           (set (with :channel "SOP"
                      (with :month 2 :year 2014
                            (events :in_test_group "Y" :shows 2641 :clicks 125 :converted 33)
                            (events :in_test_group "N" :shows 523 :clicks 23 :converted 3)
                            (events :in_test_group nil :shows 26967 :clicks 436 :converted 4))
                      (with :month 3 :year 2014
                            (events :in_test_group "Y" :shows 2 :clicks 1)))))))

  (testing "report -> string"
    (is (= "Report Awesome

Shows    | Offer Id
1        | Sam
2        | Frodo"
           (report->string {:title   [["Report Awesome"]]
                            :columns [:shows :offer_id]
                            :column-specs {:shows {:display-name "Shows"}
                                           :offer_id {:display-name "Offer Id"}}
                            :rows    [{:shows 1 :offer_id "Sam"}
                                      {:shows 2 :offer_id "Frodo"}]}))))

  )

(defn print-and-return [x]
  (println (clojure.string/replace x " " "."))
  x)

(deftest test-system-wide-summary-report
  (with-redefs
    [time/now (fn [] (time/date-time 2014 4 1 15 32))]

    (testing "sop"
      (with-redefs
        [e/system-wide-summary-count
         (fn [& _] (with :channel "SOP"
                         (with :month 2 :year 2014
                               (events :in_test_group "Y" :shows 2641 :clicks 125 :converted 33)
                               (events :in_test_group "N" :shows 523 :clicks 23 :converted 3)
                               (events :in_test_group nil :shows 26967 :clicks 436 :converted 4))
                         (with :month 3 :year 2014
                               (events :in_test_group "Y" :shows 2 :clicks 1))))]

        (let [report (system-wide-summary-report "bogus" (parse-date "2014-02-01") (parse-date "2014-03-31"))]
          (is (= [:month :channel :language :test-control-all :shows :clicks :conversions
                  :CTR :CTR-lift :conversion-rate :conversion-lift
                  :order_total :money-per-conversion :money-per-conversion-lift
                  :money-per-show :money-per-show-lift]
                 (:columns report)))

          (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: System Wide Summary

Month    | Channel  | Language | All/Test | Shows    | Clicks   | Conversi | Click Th | Clickthr | Conversi | Conversi | Bookings | $ Per Co | $ Per Co | $ Per Im | $ Per Im
TOTAL    | SOP      | English  | All      | 30133    | 585      | 40       | 0.0194   | -        | 0.0013   | -        | $0       | $0.00    | -        | $0.00    | -
2014-03  | SOP      | English  | All      | 2        | 1        | 0        | 0.5000   | -        | 0.0000   | -        | $0       | -        | -        | $0.00    | -
2014-02  | SOP      | English  | All      | 30131    | 584      | 40       | 0.0194   | -        | 0.0013   | -        | $0       | $0.00    | -        | $0.00    | -"
                 (report->string report))))))

    (testing "spg with revenue"
      (with-redefs
        [e/system-wide-summary-count
         (fn [& _] (with :channel "spg"
                         (with :language "EN_US"
                               (with :month 2 :year 2014
                                     (events :in_test_group "Y" :shows 1760843 :clicks 11327 :converted 1656 :order_total 400.00)
                                     (events :in_test_group "N" :shows 438535 :clicks 1925 :converted 305 :order_total 250.00)
                                     (events :in_test_group nil :shows 109982 :clicks 886 :converted 58))
                               (with :month 3 :year 2014
                                     (events :in_test_group "Y" :shows 10 :converted 6 :order_total 100.00)
                                     (events :in_test_group "N" :shows 10 :converted 5)))
                         (with :language "ZH_CN" :month 2 :year 2014
                               (events :in_test_group "Y" :clicks 11316)
                               (events :in_test_group "N" :clicks 1914))))]

        (let [report (system-wide-summary-report "bogus" (parse-date "2014-02-01") (parse-date "2014-03-31"))]
          (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: System Wide Summary

Month    | Channel  | Language | All/Test | Shows    | Clicks   | Conversi | Click Th | Clickthr | Conversi | Conversi | Bookings | $ Per Co | $ Per Co | $ Per Im | $ Per Im
TOTAL    | spg      | English  | Test     | 1760853  | 11327    | 1662     | 0.0064   | 0.4655   | 0.0009   | 0.3352   | $500     | $0.30    | -0.6270  | $0.00    | -0.5019
TOTAL    | spg      | English  | Control  | 438545   | 1925     | 310      | 0.0044   | -        | 0.0007   | -        | $250     | $0.81    | -        | $0.00    | -
TOTAL    | spg      | Chinese  | Test     | 0        | 11316    | 0        | -        | -        | -        | -        | $0       | -        | -        | -        | -
TOTAL    | spg      | Chinese  | Control  | 0        | 1914     | 0        | -        | -        | -        | -        | $0       | -        | -        | -        | -
2014-03  | spg      | English  | Test     | 10       | 0        | 6        | 0.0000   | -        | 0.6000   | 0.2000   | $100     | $16.67   | -        | $10.00   | -
2014-03  | spg      | English  | Control  | 10       | 0        | 5        | 0.0000   | -        | 0.5000   | -        | $0       | $0.00    | -        | $0.00    | -
2014-02  | spg      | English  | Test     | 1760843  | 11327    | 1656     | 0.0064   | 0.4654   | 0.0009   | 0.3522   | $400     | $0.24    | -0.7053  | $0.00    | -0.6015
2014-02  | spg      | English  | Control  | 438535   | 1925     | 305      | 0.0044   | -        | 0.0007   | -        | $250     | $0.82    | -        | $0.00    | -
2014-02  | spg      | Chinese  | Test     | 0        | 11316    | 0        | -        | -        | -        | -        | $0       | -        | -        | -        | -
2014-02  | spg      | Chinese  | Control  | 0        | 1914     | 0        | -        | -        | -        | -        | $0       | -        | -        | -        | -"
                 (report->string report))))))))

(deftest test-spg-report
  (with-redefs
    [time/now (fn [] (time/date-time 2014 4 1 15 32))]
    (let [start-date (parse-date "2014-02-01")
          end-date (parse-date "2014-03-31")
          rows (with
                (with :channel "SPG"
                      (with :offer_id 1 :offer_name "Offer 1"
                            (with :language "EN_US"
                                  (events :in_test_group "Y" :shows 1760843 :clicks 11327 :converted 1656)
                                  (events :in_test_group "N" :shows 438535 :clicks 1925 :converted 305)
                                  (events :in_test_group nil :shows 109982 :clicks 886 :converted 58))
                            (with :language "ZH_CN"
                                  (events :in_test_group "Y" :clicks 11316)
                                  (events :in_test_group "N" :clicks 1914)))
                      (with :offer_id 2 :offer_name "Offer 2" :language "EN_US"
                            (events :in_test_group "Y" :shows 10 :converted 6)
                            (events :in_test_group "N" :shows 10 :converted 5)))
                (with :channel "SPG_MOBI"
                      (with :offer_id 2 :offer_name "Offer 2"
                            (events :in_test_group "Y" :shows 15 :clicks 21 :converted 6)
                            (events :in_test_group "N" :shows 17 :clicks 24 :converted 4)))
                (with :channel "SPG_MY_ACCOUNT"
                      (with :offer_id 2 :offer_name "Offer 2"
                            (events :in_test_group "Y" :shows 80 :clicks 40 :converted 20)
                            (events :in_test_group "N" :shows 100 :clicks 50 :converted 25)))
                (with :channel "SPG_MY_STAYS"
                      (with :offer_id 2 :offer_name "Offer 2"
                            (events :in_test_group "Y" :shows 10 :clicks 5 :converted 3)
                            (events :in_test_group "N" :shows 20 :clicks 19 :converted 18))))]

      (testing "English spg.com report"
        (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: SPG.com Carousel

Offer Id | Offer Na | Test Sho | Test Cli | Test Con | Control  | Control  | Control  | Test Cli | Control  | Clickthr | Test Con | Control  | Conversi
-        | TOTAL    | 1760853  | 11327    | 1662     | 438545   | 1925     | 310      | 0.0064   | 0.0044   | 0.4655   | 0.0009   | 0.0007   | 0.3352
2        | Offer 2  | 10       | -        | 6        | 10       | -        | 5        | 0.0000   | 0.0000   | -        | 0.6000   | 0.5000   | 0.2000
1        | Offer 1  | 1760843  | 11327    | 1656     | 438535   | 1925     | 305      | 0.0064   | 0.0044   | 0.4654   | 0.0009   | 0.0007   | 0.3522"
               (report->string (spg-english-carousel-report rows start-date end-date)))))


      (testing "Chinese spg.com report"
        (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: SPG.com Carousel (Chinese)

Offer Id | Offer Na | Test Sho | Test Cli | Test Con | Control  | Control  | Control  | Test Cli | Control  | Clickthr | Test Con | Control  | Conversi
-        | TOTAL    | -        | 11316    | -        | -        | 1914     | -        | -        | -        | -        | -        | -        | -
1        | Offer 1  | -        | 11316    | -        | -        | 1914     | -        | -        | -        | -        | -        | -        | -"
               (report->string (spg-chinese-carousel-report rows start-date end-date)))))

      (testing "Mobile spg.com report"
        (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: SPG.com Carousel (Mobile)

Offer Id | Offer Na | Test Sho | Test Cli | Test Con | Control  | Control  | Control  | Test Cli | Control  | Clickthr | Test Con | Control  | Conversi
-        | TOTAL    | 15       | 21       | 6        | 17       | 24       | 4        | 1.4000   | 1.4118   | -0.0083  | 0.4000   | 0.2353   | 0.7000
2        | Offer 2  | 15       | 21       | 6        | 17       | 24       | 4        | 1.4000   | 1.4118   | -0.0083  | 0.4000   | 0.2353   | 0.7000"
               (report->string (spg-mobile-carousel-report rows start-date end-date)))))

      (testing "My account report"
        (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: My Account Placement

Offer Id | Offer Na | Test Sho | Test Cli | Test Con | Control  | Control  | Control  | Test Cli | Control  | Clickthr | Test Con | Control  | Conversi
-        | TOTAL    | 80       | 40       | 20       | 100      | 50       | 25       | 0.5000   | 0.5000   | 0.0000   | 0.2500   | 0.2500   | 0.0000
2        | Offer 2  | 80       | 40       | 20       | 100      | 50       | 25       | 0.5000   | 0.5000   | 0.0000   | 0.2500   | 0.2500   | 0.0000"
               (report->string (spg-my-account-report rows start-date end-date)))))

      (testing "My stays report "
        (is (= "REPORT TIMEFRAME (GMT-5): 2014-02-01 - 2014-03-31
REPORT GENERATED (GMT-5): 2014-04-01 10:32
REPORT PLACEMENT: My Stays Placement

Offer Id | Offer Na | Test Sho | Test Cli | Test Con | Control  | Control  | Control  | Test Cli | Control  | Clickthr | Test Con | Control  | Conversi
-        | TOTAL    | 10       | 5        | 3        | 20       | 19       | 18       | 0.5000   | 0.9500   | -0.4737  | 0.3000   | 0.9000   | -0.6667
2        | Offer 2  | 10       | 5        | 3        | 20       | 19       | 18       | 0.5000   | 0.9500   | -0.4737  | 0.3000   | 0.9000   | -0.6667"
               (report->string (spg-my-stays-report rows start-date end-date))))))))

(deftest test-all-sheets
  (testing "All tabs are created"
    (let [no-op (fn [& _] [])]
      (with-redefs
        [o/offer-names-by-id no-op
         e/average-positions-for-sop-offers no-op
         e/ccc-views no-op
         o/sop-offers-data no-op
         e/count-by no-op]
        (is (= ["2) PSO SPG.com Carousel" "2) PSO SPG.com Carousel (Chinese)" "2) PSO SPG.com Carousel (Mobile)" "2) PSO SPG.com Text Offers" "2) PSO My Account" "2) PSO My Stays" "2) PSO SOP" "2) PSO CCC"]
               (map first (offer-performance-report "", "", (parse-date "2014-02-01") (parse-date "2014-03-31")))))))))
