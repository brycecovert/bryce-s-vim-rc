(ns advent.core.screens.stage
  (:require [play-clj.core :refer :all]
            [play-clj.ui :refer :all]
            [play-clj.utils :refer :all]
            [play-clj.g2d :refer :all]
            [clojure.pprint]
            [advent.pathfind])
  (:import [com.badlogic.gdx.graphics Pixmap Pixmap$Filter Texture Texture$TextureFilter]
          [com.badlogic.gdx.graphics.g2d TextureRegion] ))

(defscreen stage
  :on-show
  (fn [screen entities]
    (update! screen :renderer (stage) :camera (orthographic))
    (let [
          _ (input! :set-cursor-image (cursor "cursor.png" 0) 0 0)
          background (texture "bg5.png")
          background-trees (texture "background-trees.png")
          house (texture "house.png")
          overdirt (texture "overdirt.png")
          music (sound "outside-house.mp3")
          ;; _ (sound! music :loop)
          ]
      {
       :cursor {:id "cursor" :cursor-index 0 }
       :background (assoc background
                     :id "background" :x 0 :y 0
                     :collision (advent.pathfind/map-from-resource "pathfind-test-big.png")
                     :baseline 0
                     :mouse-overrides [{:mouse-in? (box-maker-fn 290 131 320 224) 
                                        :cursor-override 4
                                        :go-to [319 160]}
                                       {:mouse-in? (box-maker-fn 60 180 224 240) 
                                        :cursor-override 7
                                        :go-to [137 204]}
                                       {:mouse-in? (box-maker-fn 0 40 30 140) 
                                        :cursor-override 6
                                        :go-to [0 80]}]
                     :interactions [{:mouse-in? (box-maker-fn 258 100 281 160)
                                     :click-fn (fn [screen entities [x y]]
                                                 (assoc-in entities [:ego :actions] [(fn [screen entities]
                                                                                       (run! talking-screen :on-talk :text "It's the door to Merlin's house."
                                                                                             :x (get-in entities [:ego :x]) :y (+ (get-in entities [:ego :y]) 25) )
                                                                                       (-> entities 
                                                                                           (update-in [:ego :actions] rest)))]))}]
                     :scale-fn (scaler-fn-with-baseline 110 0.10 1.00))
       :house (assoc house
                :x 0 :y 0
                :baseline 122)
       :overdirt (assoc overdirt
                :x 0 :y 0
                :baseline 240)
       :background-trees (assoc background-trees
                           :x 0 :y 0
                           :baseline 44)
       :ego (get-ego screen)
       :fps (assoc (label "0" (color :white) ) :x 5 :baseline 9000)
       }))
  
  :on-render
  (fn [screen [entities]]
    (let [entities (update-ego screen entities (:ego entities))
          _ (label! (:fps entities) :set-text (str (game :fps)))
          entities (if (get-in entities [:ego :anim])
                     (update-in entities [:ego] #(merge % (animation->texture screen (:anim %))))
                     entities)]
      (render! screen (sort-by :baseline (vals entities)))
      entities))

  :on-resize (fn [screen entities]
               (size! screen 320 240))

  :on-mouse-moved
  (fn [screen [entities]]
    (let [{:keys [x y]} (input->screen screen {:x (:input-x screen) :y (:input-y screen)})]
      (if-let [mouse-override (first (filter #((:mouse-in? %) x y) (get-in entities [:background :mouse-overrides])))]
        (when (not (get-in entities [:cursor :override]))
          (do (input! :set-cursor-image (cursor "cursor.png" (:cursor-override mouse-override)) 0 0)
              (assoc-in entities [:cursor :override] true)))

        (when (get-in entities [:cursor :override])
          (do (input! :set-cursor-image (cursor "cursor.png" (get-in entities [:cursor :cursor-index])) 0 0)
              (assoc-in entities [:cursor :override] false))))))

  :on-touch-down (fn [screen [entities]]
                   (if (= (button-code :right) (:button screen))
                     (right-click screen entities)
                     (left-click screen entities))))
