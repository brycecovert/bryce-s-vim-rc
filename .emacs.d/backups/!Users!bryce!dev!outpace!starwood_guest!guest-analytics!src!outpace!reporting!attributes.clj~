(ns outpace.reporting.offer
  (:require [cheshire.core :as json]
            [clj-http.client :as http]
            [clojure.core.memoize :as memo]
            [clojure.data.csv :as csv]
            [clojure.java.io :as io]
            [clojure.set :as set]
            [clojure.string :as str]
            [outpace.config :refer [defconfig]]
            [outpace.reporting.common :refer [write-res]]
            [outpace.roux.utils :as u]))

(defconfig sop-property-id-brand-name-file
  "The file containing the lookup of SOP property id to brand name."
  "sop-property-id-brand-name.csv")

(def sop-property-id-brand-name (delay (with-open [in (io/reader (io/resource sop-property-id-brand-name-file))]
                                         (into {} (csv/read-csv in)))))

(defn brand-id-name [id]
  (when id
    (case id
      "AL" "ALOFT"
      "EL" "ELEMENT"
      "4P" "FOUR POINTS"
      "GX" "GLOBAL CONEXTIONS"
      "MD" "LE MERIDIEN"
      "LC" "LUXURY COLLECTION"
      "SI" "SHERATON"
      "ST" "ST REGIS"
      "WH" "W HOTELS"
      "WI" "WESTIN"
      id)))

(defconfig ^{:doc "The URL to the offer data service."} offer-data-service-url)

(defconfig ^{:doc "The URL to the propensity service."} propensity-service-url)

(defn offers []
  ;; NOTE: if you change this function, you should delete the file created by generate-test-data and run bin/gen-test-data.
  (u/with-time! ::offers
    (doall
     (let [offers (:body (http/get (str offer-data-service-url "/offers?fields=id,name,channel,attributes") {:as :json}))]
       (for [offer offers]
         (-> offer
             (update-in [:name] #(or % ""))
             (update-in [:attributes] #(str/join ", " %))
             (set/rename-keys {:id :offer-id
                               :name :offer-name})))))))

(alter-var-root #'offers memo/lru)

(defn- index-by-id-and-source-key [offers]
  (reduce (fn [offers offer]
            (let [data {:source_key (:sourceKey offer)
                        :property_id (:propertyId offer)
                        :description (or (:description offer)
                                         (get-in offer [:callsToAction 0 :copy]))
                        :brand_id (:brandId offer)
                        :brand (or (@sop-property-id-brand-name (:propertyId offer))
                                   (brand-id-name (:brandId offer)))
                        :overrideOfferOrder (:overrideOfferOrder offer)
                        :expiration_date (:endDate offer)}]
              (assoc offers
                (:id offer) data
                (:source_key data) data)))
          {}
          offers))

(def sop-offers-data-query {:query-params {:channel "SOP"
                                           :fields "sourceKey,propertyId,description,callsToAction,brandId,overrideOfferOrder,endDate"}
                            :as :json})
(def sop-offers-data-url (str offer-data-service-url "/offers"))

(defn sop-offers-data []
  ;; NOTE: if you change this function, you should delete the file created by generate-test-data and run bin/gen-test-data.
  (u/with-time! ::sop-offers-data
    (index-by-id-and-source-key (:body (http/get
                                        sop-offers-data-url
                                        sop-offers-data-query)))))

(alter-var-root #'sop-offers-data memo/lru)

(defn offer-drivers [offer-ids]
  ;; NOTE: if you change this function, you should delete the file created by generate-test-data and run bin/gen-test-data.
  (letfn [(offer-drivers* [offer-ids]
            ;; need to not use clj-http's :as :json since it will keywordize the offer-ids
            (json/parse-string (:body (http/get (str propensity-service-url "/targeted-drivers")
                                                {:query-params {:offer-ids (str/join "," offer-ids)}}))))]
    ;; chunking to avoid sending 100's or 1000's of offer-ids in a
    ;; single request
    (u/with-time! ::offer-drivers
      (apply merge (map offer-drivers* (partition-all 100 offer-ids))))))

(alter-var-root #'offer-drivers memo/lru)

(defn- gather-driver-names [driver-infos]
  (into {} (map (juxt :id :name) driver-infos) ))

(defn driver-name-by-id []
  ;; NOTE: if you change this function, you should delete the file created by generate-test-data and run bin/gen-test-data.
  (u/with-time! ::driver-name-by-id
    (let [url (str offer-data-service-url "/drivers")
          response (http/get url {:as :json})]
      (if (http/success? response)
        (gather-driver-names (:body response))
        (throw (Exception. (str "unsuccessful at getting driver names at " url)))))))

(alter-var-root #'driver-name-by-id memo/lru)

(defn generate-test-data []
  (let [offers (memoize offers)]
    (write-res "offers.edn"
               offers)
    (write-res "offer-drivers.edn"
               #(offer-drivers (map :id (offers)))))
  (write-res "driver-name-by-id.edn"
             driver-name-by-id)
  (write-res "sop-offers-data.edn"
             sop-offers-data))
