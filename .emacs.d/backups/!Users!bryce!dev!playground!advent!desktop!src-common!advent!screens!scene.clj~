(ns advent.screens.scene
  (:require [play-clj.core :refer :all]
            [play-clj.ui :refer :all]
            [play-clj.utils :refer :all]
            [play-clj.g2d :refer :all]
            [clojure.pprint]
            [advent.pathfind]
            [advent.actions :as actions]
            [advent.zone :as zone]
            [advent.screens.dialogue :refer [talking-screen]])
  (:import [com.badlogic.gdx.graphics Pixmap Pixmap$Filter Texture Texture$TextureFilter]
          [com.badlogic.gdx.graphics.g2d TextureRegion] ))

(def +screen-width+ 320)
(def +screen-height+ 240)
(def +num-cursors+ 4)
(def +next-cursor+ (into {} (map vector (range +num-cursors+) (drop 1 (cycle (range +num-cursors+))))))

(defn +next-cursor+ [x]
  (first (drop 1 (drop-while #(not= x %) (cycle (range +num-cursors+))))))

(defn cursor [filename index]
  (let [scale 2
        base-cursor (pixmap filename)
        target-width (* 16 scale)
        target-height (* 16 scale)
        resized (Pixmap. target-width target-height (.getFormat base-cursor))]
    (Pixmap/setFilter Pixmap$Filter/NearestNeighbour)
    (pixmap! resized :draw-pixmap base-cursor (* index 16) 0 16 16
             0 0 target-width target-height)
    resized ))

(defn right-click [screen entities]
  (let [entities (update-in entities [:cursor] #(assoc % :cursor-index (+next-cursor+ (:cursor-index %))))]
    (input! :set-cursor-image (cursor "cursor.png" (get-in entities [:cursor :cursor-index])) 0 0)
    entities))


(defn walk-click [screen entities [x y]]
  (assoc-in entities [:ego :actions] (actions/from-path screen entities :ego [x y])))

(defn walk-override-click [screen entities [x y]]
  (let [target-location (->> (get-in entities [:background :mouse-overrides])
                             (filter #((:mouse-in? %) x y))
                             first
                             :go-to)]
    (assoc-in entities [:ego :actions] (actions/from-path screen entities :ego target-location))))

(defn left-click [screen entities]
  (let [{:keys [x y]} (input->screen screen {:x (:input-x screen) :y (:input-y screen)})
        interaction (first (filter #((:mouse-in? %) x y) (get-in entities [:background :interactions])))]
    (cond (get-in entities [:cursor :override]) (walk-override-click screen entities [x y])
          interaction ((:click-fn interaction) screen entities [x y])
          
          :else (walk-click screen entities [x y])))) 

(defn get-ego [screen]
  (let [player-sheet (texture! (texture "player.png") :split 18 36)
        ego {:right  (animation 0.075 (for [i (range 8)]
                                        (texture  (aget player-sheet 0 i))))
             :left (animation 0.075 (for [i (range 8)]
                                      (texture  (aget player-sheet 1 i))))
             
             :baseline 95
             :origin-x 9 
             :origin-y 0 
             :scaled true
             :actions []
             :x 150 :y 95
             :id "ego"}]
    (merge (texture (animation! (:right ego) :get-key-frame 0.25)) ego)))

(defn update-ego [screen entities ego]
  (if-let [action (first (:actions ego))]
    (action screen entities)
    entities))

(defn scaler-fn-with-baseline [baseline minimum-size & [maximum-size]]
  (let [maximum-size (or maximum-size 1.0)]
    (fn [y]
      (if (< y baseline) maximum-size
          (let [percent-complete (- 1.0 (/ (- y baseline) (- +screen-height+ baseline)))
                range (+ (* percent-complete (- maximum-size minimum-size)) minimum-size)]
            range)))))


(defscreen scene
  :on-show
  (fn [screen entities]
    (update! screen :renderer (stage) :camera (orthographic))
    (let [
          _ (input! :set-cursor-image (cursor "cursor.png" 0) 0 0)
          background (texture "bg5.png")
          background-trees (texture "background-trees.png")
          house (texture "house.png")
          overdirt (texture "overdirt.png")
          music (sound "outside-house.mp3")
          ;; _ (sound! music :loop)
          ]
      {
       :cursor {:id "cursor" :cursor-index 0 }
       :background (assoc background
                     :id "background" :x 0 :y 0
                     :collision (advent.pathfind/map-from-resource "pathfind-test-big.png")
                     :baseline 0
                     :mouse-overrides [{:mouse-in? (zone/box 290 131 320 224) 
                                        :cursor-override 4
                                        :go-to [319 160]}
                                       {:mouse-in? (zone/box 60 180 224 240) 
                                        :cursor-override 7
                                        :go-to [137 204]}
                                       {:mouse-in? (zone/box 0 40 30 140) 
                                        :cursor-override 6
                                        :go-to [0 80]}]
                     :interactions [{:mouse-in? (zone/box 258 100 281 160)
                                     :click-fn (fn [screen entities [x y]]
                                                 (assoc-in entities [:ego :actions] [(fn [screen entities]
                                                                                       (run! talking-screen :on-talk :text "It's the door to Merlin's house."
                                                                                             :x (get-in entities [:ego :x]) :y (+ (get-in entities [:ego :y]) 25) )
                                                                                       (-> entities 
                                                                                           (update-in [:ego :actions] rest)))]))}]
                     :scale-fn (scaler-fn-with-baseline 110 0.10 1.00))
       :house (assoc house
                :x 0 :y 0
                :baseline 122)
       :overdirt (assoc overdirt
                :x 0 :y 0
                :baseline 240)
       :background-trees (assoc background-trees
                           :x 0 :y 0
                           :baseline 44)
       :ego (get-ego screen)
       :fps (assoc (label "0" (color :white) ) :x 5 :baseline 9000)
       }))
  
  :on-render
  (fn [screen [entities]]
    (let [entities (update-ego screen entities (:ego entities))
          _ (label! (:fps entities) :set-text (str (game :fps)))
          entities (if (get-in entities [:ego :anim])
                     (update-in entities [:ego] #(merge % (animation->texture screen (:anim %))))
                     entities)]
      (render! screen (sort-by :baseline (vals entities)))
      entities))

  :on-resize (fn [screen entities]
               (size! screen 320 240))

  :on-mouse-moved
  (fn [screen [entities]]
    (let [{:keys [x y]} (input->screen screen {:x (:input-x screen) :y (:input-y screen)})]
      (if-let [mouse-override (first (filter #((:mouse-in? %) x y) (get-in entities [:background :mouse-overrides])))]
        (when (not (get-in entities [:cursor :override]))
          (do (input! :set-cursor-image (cursor "cursor.png" (:cursor-override mouse-override)) 0 0)
              (assoc-in entities [:cursor :override] true)))

        (when (get-in entities [:cursor :override])
          (do (input! :set-cursor-image (cursor "cursor.png" (get-in entities [:cursor :cursor-index])) 0 0)
              (assoc-in entities [:cursor :override] false))))))

  :on-touch-down (fn [screen [entities]]
                   (if (= (button-code :right) (:button screen))
                     (right-click screen entities)
                     (left-click screen entities))))
