(ns reporting.location)

(defn get-location [window]
  (let [loc (.-location window)]
    (reify
      ILookup
      (-lookup [this key]
        (aget loc (name key)))
      (-lookup [this key not-found]
        (or (aget loc (name key))
            not-found))

      ITransientAssociative
      (-assoc! [this key val]
        (aset loc (name key) val))

      ITransientMap
      (-dissoc! [this key]
        (aset loc (name key) "")))))

(defn set-location! [url]
  (set! (.-location js/window) url))

(defn set-hash!
  ([hash]
     (set-hash! js/window hash))
  ([window hash]
     (assoc! (get-location window) :hash hash)))

(defn replace-hash!
  ([hash]
     (replace-hash! js/window hash))
  ([window hash]
     (if (.-replaceState js/history)
       (.replaceState js/history nil, nil, hash)
       (set-hash! window hash))))

(defn get-hash
  ([]
     (get-hash js/window))
  ([window]
          (:hash (get-location window))))
